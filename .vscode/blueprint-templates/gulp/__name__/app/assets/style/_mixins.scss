// CSS variable
@mixin make-css-variables($map) {
  $lists: map-keys($map);
  @each $name in $lists {
    --#{$name}: #{map-get($map, $name)};
  }
}

// hide text
@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

// displays
@mixin generatorDisplays($infix: null) {
  @each $val in $displays {
    .d#{$infix}-#{$val} {
      display: $val;
    }
  }
}

// positions
@mixin generatorPositions($infix: null) {
  @each $val in $positions {
    .position#{$infix}-#{$val} {
      position: $val;
    }
  }
}

// flex-container-property
@mixin generatorFlexContainerProperties($infix: null) {
  @each $container in map-keys($flex-container-property) {
    $properties: map-get($flex-container-property, $container);
    @if(type-of($properties) == list) {
      @each $property in $properties {
        .flex#{$infix}-#{$property} {
          flex-#{$container}: $property;
        }
      }
    }
  }
}

// flex-properties
@mixin make-flex-property($name, $infix, $propery, $value) {
  .#{$name}#{$infix}-#{$propery} {
      #{$name}: $value;
    }
};

@mixin generatorFlexAxisProperties($infix: null) {
@each $item in map-keys($flex-properties) {
  @if ($item == all) {
    @each $propery, $value in map-get($flex-properties, $item) {
      @each $name in (align-items, justify-content, align-self) {
        @include make-flex-property($name, $infix, $propery, $value);
      }
    }
  } @else {
    @each $propery, $value in map-get($flex-properties, $item) {
      @include make-flex-property(justify-content, $infix, $propery, $value);
    }
  }
}
}

// grid
@mixin make-container($gutter: $gutter) {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  --container-gutter-x: #{$gutter};
  padding-right: calc(var(--container-gutter-x) / 2);
  padding-left: calc(var(--container-gutter-x) / 2);
}

@mixin make-row($gutter: $gutter) {
  --row-gutter-x: #{$gutter};
  --row-gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--row-gutter-y) * -1);
  margin-right: calc(var(--row-gutter-x) / -2);
  margin-left: calc(var(--row-gutter-x) / -2);
}

// cols
@mixin generatorColumns($infix: null) {
  @for $i from 0 through $grid-count {
    @if ($i == 0) {
      .col#{$infix} {
        padding-left: $gutter / 2;
        padding-right: $gutter / 2;
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
        width: 100%;
        position: relative;
      }
    }  @else {
        .col#{$infix}-#{$i} {
        position: relative;
        width: 100%;
        padding-left: $gutter / 2;
        padding-right: $gutter / 2;
        flex: 0 0 percentage($i / $grid-count);
        max-width: percentage($i / $grid-count);
      }
    }
  }
}

// RWD
@mixin response-degin($breakpoint) {
  @if(type-of($breakpoint) == string and map-has-key($breakpoints, $breakpoint)) {
    $point: map-get($breakpoints, $breakpoint);
    @media (max-width: $point) {
      @content;
    }
  } @else if not $breakpoint {
    @content;
  } @else {
      @warn 'no search breakpoint'
  }
};

// Colors
@mixin generatorColors() {
  @each $key, $val in $colors {
    .text-#{$key} {
      color: $val;
    }
    .bg-#{$key} {
      background: $val;
    }
  };
};

// Font size
@mixin generatorFontZise($infix: null) {
  @each $size in map-keys($font-sizes) {
    .text#{$infix}-#{$size} {
      font-size: px2rem(map-get($font-sizes, $size));
    }
  }
}

// Font weights
@mixin generatorFontWeight($infix: null) {
  @each $ket, $val in $font-weights {
    .font#{$infix}-#{$ket} {
      font-weight: $val;
    }
  };
}

// text align
@mixin generatorTextAlign($infix: null) {
  @each $val in $directions {
    @if($val != top and $val != bottom) {
      .text#{$infix}-#{$val} {
        text-align: $val;
      }
    }
  };
}

// spaces
@mixin make-spacing($name, $space, $map: $spacies, $dirction: null, $infix: null) {
  $dir-fix: null;
  @if($dirction != null) {
      $dir-fix: str-slice($dirction, 0, 1);
      $dirction: "-#{$dirction}"
  }
  .#{str-slice($name, 0, 1)}#{$dir-fix}#{$infix}-#{$space} {
      #{$name}#{$dirction}: map-get($map, $space);
  }
}

@mixin make-direction-spacing($name, $space, $map: $spacies, $dirction: null, $infix: null) {
  $dir-fix: null;
  @if($dirction != null) {
      $dir-fix: str-slice($dirction, 0, 1);
      $dirction: "-#{$dirction}"
  }
  .#{str-slice($name, 0, 1)}x#{$dir-fix}#{$infix}-#{$space} {
      #{$name}-left: map-get($map, $space);
      #{$name}-right: map-get($map, $space);
  }
  .#{str-slice($name, 0, 1)}y#{$dir-fix}#{$infix}-#{$space} {
      #{$name}-top: map-get($map, $space);
      #{$name}-bottom: map-get($map, $space);
  }
}

@mixin generatorSpaces($infix: null) {
  $types: ('margin', 'padding');
  @each $type in $types {
    @each $space in map-keys($spacies) {
      @if($type == margin and $space == auto) {
        @include make-spacing($type, $space, $spacies, null, $infix);
        @include make-direction-spacing($type, $space, $spacies, null, $infix);
        @each $dir in $directions {
          @if($dir != center) {
            @include make-spacing($type, $space, $spacies, $dir, $infix);
          }
        }
      } @else if ($space != auto) {
        @include make-spacing($type, $space, $spacies, null, $infix);
        @include make-direction-spacing($type, $space, $spacies, null, $infix);
        @each $dir in $directions {
          @if($dir != center) {
            @include make-spacing($type, $space, $spacies, $dir, $infix);
          }
        }
      }
    }
  }
}